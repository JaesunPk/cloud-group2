{"version":3,"file":"main-BxhYIMt1.js","sources":["../../src/script.js"],"sourcesContent":["import * as THREE from 'https://unpkg.com/three@0.150.1/build/three.module.js';\nimport { OrbitControls } from 'https://unpkg.com/three@0.150.1/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'https://unpkg.com/lil-gui@0.17.1/dist/lil-gui.esm.min.js';\nimport './style.css'\nimport './common.css'\n\n/**\n * Texture Loader\n */\nconst textureLoader = new THREE.TextureLoader()\n\n/**\n * Base\n */\n// Debug\nconst gui = new GUI()\ngui.hide()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/***\n * Infinity Particle Generator\n */\nconst params = {}\nconst anims = {}\nparams.count = 50000\nparams.size = 0.01\nparams.randomnessPower = 20\nparams.scale = 5\nparams.innerColor = '#00ccff'\nparams.outerColor = '#c800ff'\n\nlet geometry = null\nlet material = null\nlet points = null\n\nconst generateInfinity = () => {\n    // dump\n    if(points != null){\n        geometry.dispose()\n        material.dispose()\n        scene.remove(points)\n    }\n\n    // particles\n    geometry = new THREE.BufferGeometry()\n\n    const positions = new Float32Array(params.count * 3)\n    const colors = new Float32Array(params.count * 3)\n    const deltaAngle = Math.PI * 2 / params.count\n\n    const colorInside = new THREE.Color(params.innerColor)\n    const colorOutside = new THREE.Color(params.outerColor)\n\n    //populate positions\n    for(let i = 0; i < params.count; i++){\n        const i3 = i * 3\n\n        const angle = deltaAngle * i\n\n        // randomness\n        const randomY = Math.pow(Math.random(), params.randomnessPower) * (Math.random() < 0.5 ? 1 : -1)\n        const randomZ = Math.pow(Math.random(), params.randomnessPower) * (Math.random() < 0.5 ? 1 : -1)\n        const randomX = Math.pow(Math.random(), params.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) \n\n        positions[i3] = params.scale * (Math.sqrt(2) * Math.cos(angle))/((Math.sin(angle) * Math.sin(angle)) + 1) + randomX\n        positions[i3 + 1] = params.scale * (Math.sqrt(2) * Math.cos(angle) * Math.sin(angle)) / ((Math.sin(angle) * Math.sin(angle)) + 1) + randomY\n        positions[i3 + 2] = params.scale * randomZ\n        \n        const distanceFromCenter = Math.sqrt(positions[i3] ** 2 + positions[i3 + 1] ** 2 + positions[i3 + 2] ** 2);\n        const normalizedDistance = distanceFromCenter / params.scale;\n\n        // Colors\n        const mixedColor = colorInside.clone()\n        mixedColor.lerp(colorOutside, normalizedDistance)\n        colors[i3] = mixedColor.r\n        colors[i3 + 1] = mixedColor.g\n        colors[i3 + 2] = mixedColor.b\n\n    }\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n    material = new THREE.PointsMaterial({\n        sizeAttenuation: true,\n        blending: THREE.AdditiveBlending,\n        size: params.size,\n        depthTest: true,\n        vertexColors: true,\n        transparent: true,\n        opacity: 1\n    })\n\n    points = new THREE.Points(geometry, material)\n    scene.add(points)\n}\n\ngenerateInfinity()\n\n// anims.idleAnimation = () => {\n//     gsap.to(points.position, {\n//         y: 180,\n//         duration: 5,\n//         ease: 'power1.inOut',\n//         repeat: -1,\n//         yoyo: true, \n//         onUpdate: () => {\n//             generateInfinity()\n//         }\n//     });\n// };\n\n// anims.idleAnimation()\n\n\n\n// debug params\n\nconst infinitySection = gui.addFolder('Infinity')\ninfinitySection.add(params, 'count').min(100).max(100000).step(1).onFinishChange(generateInfinity)\ninfinitySection.add(params, 'size').min(0.01).max(1).step(0.001).onFinishChange(generateInfinity)\ninfinitySection.add(params, 'randomnessPower').min(1).max(100).step(0.001).onFinishChange(generateInfinity)\ninfinitySection.add(params, 'scale').min(1).max(10).step(0.001).onFinishChange(generateInfinity)\ninfinitySection.addColor(params, 'innerColor').onFinishChange(generateInfinity)\ninfinitySection.addColor(params, 'outerColor').onFinishChange(generateInfinity)\ninfinitySection.add(anims, 'idleAnimation')\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 0\ncamera.position.y = 0\ncamera.position.z = 0\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update Camera\n    const radius = 20\n    let cameraPos = new THREE.Vector3(\n        radius * Math.sin(elapsedTime * 0.25),\n        0,\n        radius * Math.cos(elapsedTime)\n    )\n\n    camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z)\n\n\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["THREE","gui","GUI","canvas","scene","params","anims","geometry","material","points","generateInfinity","positions","colors","deltaAngle","colorInside","colorOutside","i","i3","angle","randomY","randomZ","randomX","normalizedDistance","mixedColor","infinitySection","sizes","camera","renderer","controls","OrbitControls","clock","tick","elapsedTime","radius","cameraPos"],"mappings":"09BASsB,IAAIA,EAAM,cAMhC,MAAMC,EAAM,IAAIC,EAChBD,EAAI,KAAI,EAGR,MAAME,EAAS,SAAS,cAAc,cAAc,EAG9CC,EAAQ,IAAIJ,EAAM,MAKlBK,EAAS,CAAA,EACTC,EAAQ,CAAA,EACdD,EAAO,MAAQ,IACfA,EAAO,KAAO,IACdA,EAAO,gBAAkB,GACzBA,EAAO,MAAQ,EACfA,EAAO,WAAa,UACpBA,EAAO,WAAa,UAEpB,IAAIE,EAAW,KACXC,EAAW,KACXC,EAAS,KAEb,MAAMC,EAAmB,IAAM,CAExBD,GAAU,OACTF,EAAS,QAAO,EAChBC,EAAS,QAAO,EAChBJ,EAAM,OAAOK,CAAM,GAIvBF,EAAW,IAAIP,EAAM,eAErB,MAAMW,EAAY,IAAI,aAAaN,EAAO,MAAQ,CAAC,EAC7CO,EAAS,IAAI,aAAaP,EAAO,MAAQ,CAAC,EAC1CQ,EAAa,KAAK,GAAK,EAAIR,EAAO,MAElCS,EAAc,IAAId,EAAM,MAAMK,EAAO,UAAU,EAC/CU,EAAe,IAAIf,EAAM,MAAMK,EAAO,UAAU,EAGtD,QAAQW,EAAI,EAAGA,EAAIX,EAAO,MAAOW,IAAI,CACjC,MAAMC,EAAKD,EAAI,EAETE,EAAQL,EAAaG,EAGrBG,EAAU,KAAK,IAAI,KAAK,OAAM,EAAId,EAAO,eAAe,GAAK,KAAK,OAAM,EAAK,GAAM,EAAI,IACvFe,EAAU,KAAK,IAAI,KAAK,OAAM,EAAIf,EAAO,eAAe,GAAK,KAAK,OAAM,EAAK,GAAM,EAAI,IACvFgB,EAAU,KAAK,IAAI,KAAK,OAAQ,EAAEhB,EAAO,eAAe,GAAK,KAAK,OAAQ,EAAG,GAAM,EAAI,IAE7FM,EAAUM,CAAE,EAAIZ,EAAO,OAAS,KAAK,KAAK,CAAC,EAAI,KAAK,IAAIa,CAAK,IAAK,KAAK,IAAIA,CAAK,EAAI,KAAK,IAAIA,CAAK,EAAK,GAAKG,EAC5GV,EAAUM,EAAK,CAAC,EAAIZ,EAAO,OAAS,KAAK,KAAK,CAAC,EAAI,KAAK,IAAIa,CAAK,EAAI,KAAK,IAAIA,CAAK,IAAO,KAAK,IAAIA,CAAK,EAAI,KAAK,IAAIA,CAAK,EAAK,GAAKC,EACpIR,EAAUM,EAAK,CAAC,EAAIZ,EAAO,MAAQe,EAGnC,MAAME,EADqB,KAAK,KAAKX,EAAUM,CAAE,GAAK,EAAIN,EAAUM,EAAK,CAAC,GAAK,EAAIN,EAAUM,EAAK,CAAC,GAAK,CAAC,EACzDZ,EAAO,MAGjDkB,EAAaT,EAAY,MAAK,EACpCS,EAAW,KAAKR,EAAcO,CAAkB,EAChDV,EAAOK,CAAE,EAAIM,EAAW,EACxBX,EAAOK,EAAK,CAAC,EAAIM,EAAW,EAC5BX,EAAOK,EAAK,CAAC,EAAIM,EAAW,CAEpC,CAEIhB,EAAS,aAAa,WAAY,IAAIP,EAAM,gBAAgBW,EAAW,CAAC,CAAC,EACzEJ,EAAS,aAAa,QAAS,IAAIP,EAAM,gBAAgBY,EAAQ,CAAC,CAAC,EAEnEJ,EAAW,IAAIR,EAAM,eAAe,CAChC,gBAAiB,GACjB,SAAUA,EAAM,iBAChB,KAAMK,EAAO,KACb,UAAW,GACX,aAAc,GACd,YAAa,GACb,QAAS,CACZ,CAAA,EAEDI,EAAS,IAAIT,EAAM,OAAOO,EAAUC,CAAQ,EAC5CJ,EAAM,IAAIK,CAAM,CACpB,EAEAC,EAAgB,EAqBhB,MAAMc,EAAkBvB,EAAI,UAAU,UAAU,EAChDuB,EAAgB,IAAInB,EAAQ,OAAO,EAAE,IAAI,GAAG,EAAE,IAAI,GAAM,EAAE,KAAK,CAAC,EAAE,eAAeK,CAAgB,EACjGc,EAAgB,IAAInB,EAAQ,MAAM,EAAE,IAAI,GAAI,EAAE,IAAI,CAAC,EAAE,KAAK,IAAK,EAAE,eAAeK,CAAgB,EAChGc,EAAgB,IAAInB,EAAQ,iBAAiB,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,KAAK,IAAK,EAAE,eAAeK,CAAgB,EAC1Gc,EAAgB,IAAInB,EAAQ,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,IAAK,EAAE,eAAeK,CAAgB,EAC/Fc,EAAgB,SAASnB,EAAQ,YAAY,EAAE,eAAeK,CAAgB,EAC9Ec,EAAgB,SAASnB,EAAQ,YAAY,EAAE,eAAeK,CAAgB,EAC9Ec,EAAgB,IAAIlB,EAAO,eAAe,EAK1C,MAAMmB,EAAQ,CACV,MAAO,OAAO,WACd,OAAQ,OAAO,WACnB,EAEA,OAAO,iBAAiB,SAAU,IAClC,CAEIA,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YAGtBC,EAAO,OAASD,EAAM,MAAQA,EAAM,OACpCC,EAAO,uBAAsB,EAG7BC,EAAS,QAAQF,EAAM,MAAOA,EAAM,MAAM,EAC1CE,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,CAAC,CAAC,CAC/D,CAAC,EAMD,MAAMD,EAAS,IAAI1B,EAAM,kBAAkB,GAAIyB,EAAM,MAAQA,EAAM,OAAQ,GAAK,GAAG,EACnFC,EAAO,SAAS,EAAI,EACpBA,EAAO,SAAS,EAAI,EACpBA,EAAO,SAAS,EAAI,EACpBtB,EAAM,IAAIsB,CAAM,EAGhB,MAAME,EAAW,IAAIC,EAAcH,EAAQvB,CAAM,EACjDyB,EAAS,cAAgB,GAKzB,MAAMD,EAAW,IAAI3B,EAAM,cAAc,CACrC,OAAQG,CACZ,CAAC,EACDwB,EAAS,QAAQF,EAAM,MAAOA,EAAM,MAAM,EAC1CE,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,CAAC,CAAC,EAK3D,MAAMG,EAAQ,IAAI9B,EAAM,MAElB+B,EAAO,IACb,CACI,MAAMC,EAAcF,EAAM,eAAc,EAGlCG,EAAS,GACf,IAAIC,EAAY,IAAIlC,EAAM,QACtBiC,EAAS,KAAK,IAAID,EAAc,GAAI,EACpC,EACAC,EAAS,KAAK,IAAID,CAAW,CACrC,EAEIN,EAAO,SAAS,IAAIQ,EAAU,EAAGA,EAAU,EAAGA,EAAU,CAAC,EAKzDN,EAAS,OAAM,EAGfD,EAAS,OAAOvB,EAAOsB,CAAM,EAG7B,OAAO,sBAAsBK,CAAI,CACrC,EAEAA,EAAI"}